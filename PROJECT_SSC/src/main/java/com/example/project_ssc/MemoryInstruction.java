package com.example.project_ssc;

public class MemoryInstruction {

    public static String[] instMemory = new String[1024];

    static {
        instMemory[0] = "00000000010000010000100000000000"; // add  r1=1 , r2=2 => r0=3
        instMemory[1] = "00000000110001110000110000001101"; // sub  r7=7 , r3=3 => r13=4
        instMemory[2] = "00000000100000110110000000000100"; // addi r3=3 , r24=24 , r4=4 => r24 = 7
        instMemory[3] = "00000001000001000000110000001111"; // mult r4=4 , r3=3 , r15=15 => r15=12
        instMemory[4] = "00000001010010110011000000010001"; // and  r11=11 , r12=12, r17=17 => r17= 1000 (8)
        instMemory[5] = "00000001100001100101110000000011"; // ori r6=6 , r23= 23 , r3=3 => r23=7
        instMemory[6] = "00000001110010100000000000000010"; // sll  3*4=12 r10=10= d, r0=3 =t, h= 2 => rd(10)<= 3*2*2 =12
        instMemory[7] = "00000010000110000101000000000001"; // srl 20/2=10 r24=7(d) , r20=20 =t , h=1 => rd(24) <= 20/2 =10
        instMemory[8] = "00000010010010000000000000000111"; // lw  r8=8(s) , r0=3(t) h=7 => r0=mem(8+7) -> r0=0
        instMemory[9] = "00000010100011000000010000001111"; // sw   r12=12(s) , r1=1 (t) h=15 => mem(12+15) = 1 => mem(27)=1
        instMemory[10] ="00000011010111010011110000010010"; // slt 29 mai mare ca 15 =: rd=0
        instMemory[11]= "10000000000101110100110000001110 ";//or r[14] <= r[23]=7 or r[19]=19 10111
        instMemory[12]= "10000000010101110100110000011111";//xor r[31]<= 23 xor 19 10100
        instMemory[13]= "10000000100011010010110000001010";//andi rs13=4 , imm=1010(10) => rt11= 0100 & 1010 => 0000
        instMemory[14]= "00000010110001010001110000001010"; // branch not equal r5=5, r7= 7 5!=7 BranchAddress=10
        //if $s != $t PC  PC + 4 + (offset << 2); else PC  PC + 4;


    }
}
